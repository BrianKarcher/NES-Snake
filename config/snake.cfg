SYMBOLS {
    __STACKSIZE__: type = weak, value = $0300; # 3 pages stack
}
MEMORY {
	# Zero page: $0000-$00FF
    ZP:     file = "", start = $0000, size = $0100, type = rw, define = yes;

    # INES Cartridge Header
    HEADER: file = %O, start = $0000, size = $0010, fill = yes;

    # 2 16K ROM Banks
    # - startup
    # - code
    # - rodata
    # - data (load)
    # PRG-ROM (Program code, 16KB or 32KB)
    PRG:    start = $8000,  size = $7FFA, type = ro, file = %O, fill = yes, fillval = $FF;
    PRGV:   file = %O, start = $FFFA, size = $0006, type = ro, fill = yes, fillval = $FF;

    # CHR-ROM Bank 0 (8 KB)
    CHR0:   file = %O, start = $0000, size = $2000, fill = yes;

    # CHR-ROM Bank 1 (8 KB)
    CHR1:   file = %O, start = $0000, size = $2000, fill = yes;

    # standard 2k SRAM (-zeropage)
    # $0100-$0200 cpu stack
    # $0200-$0500 3 pages for ppu memory write buffer
    SRAM:   file = "", start = $0500, size = __STACKSIZE__, define = yes;

    # additional 8K SRAM Bank
    # - data (run)
    # - bss
    # - heap
    RAM:    file = "", start = $6000, size = $2000, define = yes;
}
SEGMENTS {
    ZEROPAGE: load = ZP,              type = zp;
    HEADER:   load = HEADER,          type = ro;
    STARTUP:  load = PRG,            type = ro,  define   = yes;
    LOWCODE:  load = PRG,            type = ro,  optional = yes;
    ONCE:     load = PRG,            type = ro,  optional = yes;
    RODATA:   load = PRG,            type = ro,  define   = yes;
    DATA:     load = PRG, run = RAM, type = rw,  define   = yes;
    CODE:     load = PRG, type = ro;
    VECTORS:  load = PRGV, type = ro;
    CHR_BANK_0: load = CHR0,          type = ro;
    CHR_BANK_1: load = CHR1,          type = ro;
    BSS:      load = RAM,             type = bss, define   = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
